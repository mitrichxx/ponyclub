/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Horse } from "./Horse";
import { HorseCountArgs } from "./HorseCountArgs";
import { HorseFindManyArgs } from "./HorseFindManyArgs";
import { HorseFindUniqueArgs } from "./HorseFindUniqueArgs";
import { CreateHorseArgs } from "./CreateHorseArgs";
import { UpdateHorseArgs } from "./UpdateHorseArgs";
import { DeleteHorseArgs } from "./DeleteHorseArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { HorseService } from "../horse.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Horse)
export class HorseResolverBase {
  constructor(
    protected readonly service: HorseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Horse",
    action: "read",
    possession: "any",
  })
  async _horsesMeta(
    @graphql.Args() args: HorseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Horse])
  @nestAccessControl.UseRoles({
    resource: "Horse",
    action: "read",
    possession: "any",
  })
  async horses(@graphql.Args() args: HorseFindManyArgs): Promise<Horse[]> {
    return this.service.horses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Horse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Horse",
    action: "read",
    possession: "own",
  })
  async horse(
    @graphql.Args() args: HorseFindUniqueArgs
  ): Promise<Horse | null> {
    const result = await this.service.horse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Horse)
  @nestAccessControl.UseRoles({
    resource: "Horse",
    action: "create",
    possession: "any",
  })
  async createHorse(@graphql.Args() args: CreateHorseArgs): Promise<Horse> {
    return await this.service.createHorse({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Horse)
  @nestAccessControl.UseRoles({
    resource: "Horse",
    action: "update",
    possession: "any",
  })
  async updateHorse(
    @graphql.Args() args: UpdateHorseArgs
  ): Promise<Horse | null> {
    try {
      return await this.service.updateHorse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Horse)
  @nestAccessControl.UseRoles({
    resource: "Horse",
    action: "delete",
    possession: "any",
  })
  async deleteHorse(
    @graphql.Args() args: DeleteHorseArgs
  ): Promise<Horse | null> {
    try {
      return await this.service.deleteHorse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  @nestAccessControl.UseRoles({
    resource: "Booking",
    action: "read",
    possession: "any",
  })
  async findBookings(
    @graphql.Parent() parent: Horse,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
