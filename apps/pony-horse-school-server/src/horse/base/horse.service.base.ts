/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Horse as PrismaHorse,
  Booking as PrismaBooking,
} from "@prisma/client";

export class HorseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HorseCountArgs, "select">): Promise<number> {
    return this.prisma.horse.count(args);
  }

  async horses(args: Prisma.HorseFindManyArgs): Promise<PrismaHorse[]> {
    return this.prisma.horse.findMany(args);
  }
  async horse(args: Prisma.HorseFindUniqueArgs): Promise<PrismaHorse | null> {
    return this.prisma.horse.findUnique(args);
  }
  async createHorse(args: Prisma.HorseCreateArgs): Promise<PrismaHorse> {
    return this.prisma.horse.create(args);
  }
  async updateHorse(args: Prisma.HorseUpdateArgs): Promise<PrismaHorse> {
    return this.prisma.horse.update(args);
  }
  async deleteHorse(args: Prisma.HorseDeleteArgs): Promise<PrismaHorse> {
    return this.prisma.horse.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.horse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
