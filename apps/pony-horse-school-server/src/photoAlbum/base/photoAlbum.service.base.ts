/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PhotoAlbum as PrismaPhotoAlbum } from "@prisma/client";
import { CreatePhotoAlbumInput } from "../CreatePhotoAlbumInput";

export class PhotoAlbumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PhotoAlbumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.photoAlbum.count(args);
  }

  async photoAlbums(
    args: Prisma.PhotoAlbumFindManyArgs
  ): Promise<PrismaPhotoAlbum[]> {
    return this.prisma.photoAlbum.findMany(args);
  }
  async photoAlbum(
    args: Prisma.PhotoAlbumFindUniqueArgs
  ): Promise<PrismaPhotoAlbum | null> {
    return this.prisma.photoAlbum.findUnique(args);
  }
  async createPhotoAlbum(
    args: Prisma.PhotoAlbumCreateArgs
  ): Promise<PrismaPhotoAlbum> {
    return this.prisma.photoAlbum.create(args);
  }
  async updatePhotoAlbum(
    args: Prisma.PhotoAlbumUpdateArgs
  ): Promise<PrismaPhotoAlbum> {
    return this.prisma.photoAlbum.update(args);
  }
  async deletePhotoAlbum(
    args: Prisma.PhotoAlbumDeleteArgs
  ): Promise<PrismaPhotoAlbum> {
    return this.prisma.photoAlbum.delete(args);
  }
  async CreatePhotoAlbum(
    args: CreatePhotoAlbumInput
  ): Promise<CreatePhotoAlbumInput> {
    throw new Error("Not implemented");
  }
}
