/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PhotoAlbumService } from "../photoAlbum.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PhotoAlbumCreateInput } from "./PhotoAlbumCreateInput";
import { PhotoAlbum } from "./PhotoAlbum";
import { PhotoAlbumFindManyArgs } from "./PhotoAlbumFindManyArgs";
import { PhotoAlbumWhereUniqueInput } from "./PhotoAlbumWhereUniqueInput";
import { PhotoAlbumUpdateInput } from "./PhotoAlbumUpdateInput";
import { CreatePhotoAlbumInput } from "../CreatePhotoAlbumInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PhotoAlbumControllerBase {
  constructor(
    protected readonly service: PhotoAlbumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PhotoAlbum })
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPhotoAlbum(
    @common.Body() data: PhotoAlbumCreateInput
  ): Promise<PhotoAlbum> {
    return await this.service.createPhotoAlbum({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        photos: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PhotoAlbum] })
  @ApiNestedQuery(PhotoAlbumFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async photoAlbums(@common.Req() request: Request): Promise<PhotoAlbum[]> {
    const args = plainToClass(PhotoAlbumFindManyArgs, request.query);
    return this.service.photoAlbums({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        photos: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PhotoAlbum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async photoAlbum(
    @common.Param() params: PhotoAlbumWhereUniqueInput
  ): Promise<PhotoAlbum | null> {
    const result = await this.service.photoAlbum({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        photos: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PhotoAlbum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePhotoAlbum(
    @common.Param() params: PhotoAlbumWhereUniqueInput,
    @common.Body() data: PhotoAlbumUpdateInput
  ): Promise<PhotoAlbum | null> {
    try {
      return await this.service.updatePhotoAlbum({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          photos: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PhotoAlbum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePhotoAlbum(
    @common.Param() params: PhotoAlbumWhereUniqueInput
  ): Promise<PhotoAlbum | null> {
    try {
      return await this.service.deletePhotoAlbum({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          photos: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/photo-albums")
  @swagger.ApiOkResponse({
    type: CreatePhotoAlbumInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreatePhotoAlbum(
    @common.Body()
    body: CreatePhotoAlbumInput
  ): Promise<CreatePhotoAlbumInput> {
    return this.service.CreatePhotoAlbum(body);
  }
}
