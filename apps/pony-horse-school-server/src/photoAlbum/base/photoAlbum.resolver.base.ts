/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PhotoAlbum } from "./PhotoAlbum";
import { PhotoAlbumCountArgs } from "./PhotoAlbumCountArgs";
import { PhotoAlbumFindManyArgs } from "./PhotoAlbumFindManyArgs";
import { PhotoAlbumFindUniqueArgs } from "./PhotoAlbumFindUniqueArgs";
import { CreatePhotoAlbumArgs } from "./CreatePhotoAlbumArgs";
import { UpdatePhotoAlbumArgs } from "./UpdatePhotoAlbumArgs";
import { DeletePhotoAlbumArgs } from "./DeletePhotoAlbumArgs";
import { CreatePhotoAlbumInput } from "../CreatePhotoAlbumInput";
import { PhotoAlbumService } from "../photoAlbum.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PhotoAlbum)
export class PhotoAlbumResolverBase {
  constructor(
    protected readonly service: PhotoAlbumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "read",
    possession: "any",
  })
  async _photoAlbumsMeta(
    @graphql.Args() args: PhotoAlbumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PhotoAlbum])
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "read",
    possession: "any",
  })
  async photoAlbums(
    @graphql.Args() args: PhotoAlbumFindManyArgs
  ): Promise<PhotoAlbum[]> {
    return this.service.photoAlbums(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PhotoAlbum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "read",
    possession: "own",
  })
  async photoAlbum(
    @graphql.Args() args: PhotoAlbumFindUniqueArgs
  ): Promise<PhotoAlbum | null> {
    const result = await this.service.photoAlbum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PhotoAlbum)
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "create",
    possession: "any",
  })
  async createPhotoAlbum(
    @graphql.Args() args: CreatePhotoAlbumArgs
  ): Promise<PhotoAlbum> {
    return await this.service.createPhotoAlbum({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PhotoAlbum)
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "update",
    possession: "any",
  })
  async updatePhotoAlbum(
    @graphql.Args() args: UpdatePhotoAlbumArgs
  ): Promise<PhotoAlbum | null> {
    try {
      return await this.service.updatePhotoAlbum({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PhotoAlbum)
  @nestAccessControl.UseRoles({
    resource: "PhotoAlbum",
    action: "delete",
    possession: "any",
  })
  async deletePhotoAlbum(
    @graphql.Args() args: DeletePhotoAlbumArgs
  ): Promise<PhotoAlbum | null> {
    try {
      return await this.service.deletePhotoAlbum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatePhotoAlbumInput)
  async CreatePhotoAlbum(
    @graphql.Args()
    args: CreatePhotoAlbumInput
  ): Promise<CreatePhotoAlbumInput> {
    return this.service.CreatePhotoAlbum(args);
  }
}
